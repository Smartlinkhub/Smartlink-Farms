"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractMethodObject = void 0;
var wallet_1 = require("../../wallet");
var contract_1 = require("../contract");
/**
 * @description Utility class to send smart contract operation
 * The format for the arguments is the object representation
 */
var ContractMethodObject = /** @class */ (function () {
    function ContractMethodObject(provider, address, parameterSchema, name, args, isMultipleEntrypoint, isAnonymous) {
        if (args === void 0) { args = 'unit'; }
        if (isMultipleEntrypoint === void 0) { isMultipleEntrypoint = true; }
        if (isAnonymous === void 0) { isAnonymous = false; }
        this.provider = provider;
        this.address = address;
        this.parameterSchema = parameterSchema;
        this.name = name;
        this.args = args;
        this.isMultipleEntrypoint = isMultipleEntrypoint;
        this.isAnonymous = isAnonymous;
    }
    /**
   * @description Get the signature of the smart contract method
   */
    ContractMethodObject.prototype.getSignature = function () {
        return this.isAnonymous
            ? this.parameterSchema.ExtractSchema()[this.name]
            : this.parameterSchema.ExtractSchema();
    };
    /**
     *
     * @description Send the smart contract operation
     *
     * @param Options generic operation parameter
     */
    ContractMethodObject.prototype.send = function (params) {
        if (params === void 0) { params = {}; }
        if (this.provider instanceof wallet_1.Wallet) {
            return this.provider.transfer(this.toTransferParams(params)).send();
        }
        else {
            return this.provider.transfer(this.toTransferParams(params));
        }
    };
    /**
     *
     * @description Create transfer params to be used with TezosToolkit.contract.transfer methods
     *
     * @param Options generic transfer operation parameters
     */
    ContractMethodObject.prototype.toTransferParams = function (_a) {
        var _b;
        var _c = _a === void 0 ? {} : _a, fee = _c.fee, gasLimit = _c.gasLimit, storageLimit = _c.storageLimit, source = _c.source, _d = _c.amount, amount = _d === void 0 ? 0 : _d, _e = _c.mutez, mutez = _e === void 0 ? false : _e;
        var fullTransferParams = {
            to: this.address,
            amount: amount,
            fee: fee,
            mutez: mutez,
            source: source,
            gasLimit: gasLimit,
            storageLimit: storageLimit,
            parameter: {
                entrypoint: this.isMultipleEntrypoint ? this.name : contract_1.DEFAULT_SMART_CONTRACT_METHOD_NAME,
                value: this.isAnonymous
                    ? this.parameterSchema.EncodeObject((_b = {}, _b[this.name] = this.args, _b))
                    : this.parameterSchema.EncodeObject(this.args),
            },
        };
        return fullTransferParams;
    };
    return ContractMethodObject;
}());
exports.ContractMethodObject = ContractMethodObject;
//# sourceMappingURL=contract-method-object-param.js.map